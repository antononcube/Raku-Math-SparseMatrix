use v6.d;

# use lib <. lib>;
use Math::SparseMatrix :ALL;
use Math::SparseMatrix::Utilities;

use Test;

plan *;

my $nrow = 5;
my $ncol = 8;
my $density = 0.25;
my $tol = 0.001;
my $type = 'CSR';

# Here we create a decorated sparse matrix
my $smat1 = generate-random-sparse-matrix($nrow, $ncol, :$density, :$tol, :$type):decorated;

# Here that matrix is given row-names and column-names:
$smat1 =
        Math::SparseMatrix.new(
                core-matrix => $smat1,
                row-names => 'a' .. 'e',
                column-names => 'A' .. 'H'
                );

my $smat2 = $smat1.clone;
$smat2.implicit-value = 10;

#==========================================================
# Row sums
#==========================================================
subtest {

    isa-ok $smat1.row-sums, Array:D, 'expected array';
    isa-ok $smat1.row-sums(:pairs), Hash:D, 'expected map';

    my @sums = $smat1.Array>>.sum;
    is $smat1.row-sums, @sums, 'expected sums';

    my @sums2 = $smat2.Array>>.sum;
    is $smat2.row-sums, @sums2, 'expected sums with implicit value';
}, 'Row sums';

#==========================================================
# Column sums
#==========================================================
subtest {

    isa-ok $smat1.column-sums, Array:D, 'expected array';
    isa-ok $smat1.column-sums(:pairs), Hash:D, 'expected map';

    my @sums = $smat1.transpose.Array>>.sum;
    is $smat1.column-sums, @sums, 'expected sums';

    my @sums2 = $smat2.transpose.Array>>.sum;
    is $smat2.column-sums, @sums2, 'expected sums with implicit value';
}, 'Column sums';

#==========================================================
# Row maxes
#==========================================================
subtest {

    isa-ok $smat1.row-maxes, Array:D, 'expected array';
    isa-ok $smat1.row-maxes(:pairs), Hash:D, 'expected map';

    my @vals = $smat1.Array>>.max;
    is $smat1.row-maxes, @vals, 'expected maxes';

    my @sums2 = $smat2.Array>>.max;
    is $smat2.row-maxes, @sums2, 'expected maxes with implicit value';
}, 'Row maxes';

#==========================================================
# Column maxes
#==========================================================
subtest {

    isa-ok $smat1.column-maxes, Array:D, 'expected array';
    isa-ok $smat1.column-maxes(:pairs), Hash:D, 'expected map';

    my @vals = $smat1.transpose.Array>>.max;
    is $smat1.column-maxes, @vals, 'expected maxes';

    my @sums2 = $smat2.transpose.Array>>.max;
    is $smat2.column-maxes, @sums2, 'expected maxes with implicit value';
}, 'Column maxes';

done-testing;
