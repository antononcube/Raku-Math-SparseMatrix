use v6.d;

use lib <. lib>;
use Math::SparseMatrix::CSR;
use Math::SparseMatrix::Utilities;
use Test;

my $nrow = 5;
my $ncol = 8;
my $density = 0.5;
my $tol = 0.01;

my $matrix1 = generate-random-sparse-matrix(:$nrow, :$ncol, :$density, :$tol);
my $matrix2 = generate-random-sparse-matrix(:$nrow, :$ncol, :$density, :$tol);

## Too contrived?
sub mult-by-rules($matrix1, $matrix2) {
    my %rules;
    for $matrix1.rules -> $r1 {
        for $matrix2.rules -> $r2 {
            if $r1.key eqv $r2.key {
                %rules{$r1.key.Str} = $r1.value * $r2.value
            } elsif $matrix2.implicit-value != 0 && (%rules{$r1.key.Str}:!exists) {
                %rules{$r1.key.Str} = $r1.value * $matrix2.implicit-value
            } elsif $matrix1.implicit-value != 0 && (%rules{$r2.key.Str}:!exists) {
                %rules{$r2.key.Str} = $r2.value * $matrix1.implicit-value
            }
        }
    }
    return %rules;
}

## 1
isa-ok $matrix1, Math::SparseMatrix::CSR;

## 2
isa-ok $matrix1, Math::SparseMatrix::CSR;

## 3
isa-ok $matrix1.add(4.3), Math::SparseMatrix::CSR;

## 4
isa-ok $matrix1.add($matrix2), Math::SparseMatrix::CSR;

## 5
is-deeply
        $matrix1.multiply($matrix2).rules.Hash,
        mult-by-rules($matrix1, $matrix2),
        "Same rules of mult-by-rules";

## 6
subtest {
    my $matrix1iv = $matrix1.clone;
    $matrix1iv.implicit-value = 1.5;
    my $matrix2iv = $matrix2.clone;
    $matrix2iv.implicit-value = 2.2;
    is-deeply
            $matrix1iv.multiply($matrix2iv).rules.Hash,
            mult-by-rules($matrix1iv, $matrix2iv),
            "Same rules of mult-by-rules";
    is
            $matrix1iv.multiply($matrix2iv).implicit-value,
            $matrix1iv.implicit-value * $matrix2iv.implicit-value,
            "Implcit value";
}, "Multiplication with implicit values";

## 7
subtest {
    my $matrix1iv = $matrix1.clone;
    $matrix1iv.implicit-value = 1.5;
    is-deeply
            $matrix1iv.multiply($matrix2).rules.Hash,
            mult-by-rules($matrix1iv, $matrix2),
            "Same rules of mult-by-rules";
    is
            $matrix1iv.multiply($matrix2).implicit-value,
            0,
            "Implicit value";
}, "Multiplication with non-zero implicit value of one of the matrices";

done-testing;
