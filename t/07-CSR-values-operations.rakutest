use v6.d;

#use lib <. lib>;
use Math::SparseMatrix::CSR;
use Math::SparseMatrix::Utilities;
use Test;

my $nrow = 5;
my $ncol = 8;
my $density = 0.25;
my $tol = 0.01;

my $matrix1 = generate-random-sparse-matrix($nrow, $ncol, :$density, :$tol):!decorated;

plan *;

## 1
subtest {
    my $matrix1a = $matrix1.clone;
    isa-ok $matrix1a.unitize, Math::SparseMatrix::CSR:D;
}, "unitize";

## 2
subtest {
    my $matrix1a = $matrix1.clone;
    isa-ok $matrix1a.clip(min => 0.01, max => 0.6), Math::SparseMatrix::CSR:D;
    isa-ok $matrix1a.clip(min => 0.01, max => 0.6, :clone), Math::SparseMatrix::CSR:D;
}, "clip";

## 3
subtest {
    my $matrix1a = $matrix1.clone;
    isa-ok $matrix1a.round(0.2), Math::SparseMatrix::CSR:D;
    isa-ok $matrix1a.round(0.2, :clone), Math::SparseMatrix::CSR:D;
}, "round";

## 4
subtest {
    my $matrix1c = $matrix1.clone;
    ok $matrix1c.conjugate;
    ok $matrix1c.conjugate(:clone);
}, "conjugate";

## 5
subtest {
    my $matrix1c = $matrix1.clone;
    ok $matrix1c.apply-elementwise({$_ + 2}, :skip-implicit-value);
    ok $matrix1c.apply-elementwise({$_ + 2}, :skip-implicit-value, :clone);
}, "apply-elementwise";

## 6
subtest {
    ok $matrix1.row-sums;
    ok $matrix1.column-sums;
    is $matrix1.row-sums, $matrix1.Array.map({ $_.sum }), 'expected row sums';
    is $matrix1.column-sums, $matrix1.transpose.Array.map({ $_.sum }), 'expected column sums';
    is-deeply $matrix1.row-sums(:pairs), $matrix1.Array.kv.map(-> $k, @v { $k => @v.sum }).Hash, 'expected row sums, :pairs';

    my $matrix1a = $matrix1.clone;
    $matrix1a.implicit-value = 10;
    is $matrix1a.row-sums, $matrix1a.Array.map({ $_.sum }), 'expected row sums with implicit value';

}, "row-sums & column-sums";

## 7
subtest {
    ok $matrix1.row-maxes;
    ok $matrix1.column-maxes;
    is $matrix1.row-maxes, $matrix1.Array.map({ $_.max }), 'expected row maxes';
    is $matrix1.column-maxes, $matrix1.transpose.Array.map({ $_.max }), 'expected column maxes';
    is-deeply $matrix1.row-maxes(:pairs), $matrix1.Array.kv.map(-> $k, @v { $k => @v.max }).Hash, 'expected row maxes, :pairs';

    my $matrix1a = $matrix1.clone;
    $matrix1a.implicit-value = 10;
    is $matrix1a.row-maxes, $matrix1a.Array.map({ $_.max }), 'expected row maxes with implicit value';

}, "row-maxes & column-maxes";

done-testing;
